 JSON
 4. Создать внешний репозиторий c названием JSON - сделан в веб интерфейсе
 5. Клонировать репозиторий JSON на локальный компьютер - git clone https://github.com/VladimirKolosov/JSON.git
-----------------------------------------------
 $ ls
 JSON/  Terminal-Linux/  tr4nk/
------------------------------------------------
 6. Внутри локального JSON создать файл “new.json” cd JSON, nano new.json
-----------------------------------------------
 $ ls
 README.md new.json
------------------------------------------------
 7. Добавить файл под гит - git new.json
------------------------------------------------
------------------------------------------------
 8. Закоммитить файл - git commit -m "последний файл"
------------------------------------------------
------------------------------------------------
 9. Отправить файл на внешний GitHub репозиторий - git push Файл new.json появился на внешнем репозитории
------------------------------------------------
------------------------------------------------
 10. Отредактировать содержание файла “new.json” - nano new.json, после внесения изменений можно проверить статут файла с помощью команды git status
------------------------------------------------
{
   "Name" : "Vladimir Kolosov",
   "Age" : 27,
   "Pets" : 2,
   "Future salary" : "no limits"
}

-------------------------------------------------
-------------------------------------------------
  modified:   new.json
-------------------------------------------------
 11. Отправить изменения на внешний репозиторий - git commit -am"file changed new.json", потом git push. После этого на веб интерфейсе появляется измененный файл new.json
-------------------------------------------------
-------------------------------------------------
 12. Создать файл preferences.json - nano preferences.json
------------------------------------------------
$ ls
README.md  new.json  preferencec.json
-------------------------------------------------
 13. В файл preferences.json добавить информацию о своих предпочтениях
-------------------------------------------------
$ cat preferencec.json
{
        "Favorite Film": "Avengers",
        "Favorite Food": "Pasta",
        "Favorite time of year": "Summer"
}
-------------------------------------------------
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе - nano skills.json
-------------------------------------------------
$ cat skills.json
{
        "Skill": "Mobile testing",
        "Skill": "API Testing with Postman",
        "Skill": "Web browser Dev Tools"
}
-------------------------------------------------
 15. Отправить сразу 2 файла на внешний репозиторий - git add . , git commit -m"new files", git push. После выполнения команд файлы появились на внешнем репозитории
-------------------------------------------------
-------------------------------------------------
 16. На веб интерфейсе создать файл bug_report.json - в репозитории JSON нажимаем кнопку Add file и выбираем Create new file(задаем нужное имя файла)
-------------------------------------------------
-------------------------------------------------
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе - Нажимаем кнопку Commit new file
-------------------------------------------------
-------------------------------------------------
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON - открыл созданный файл и нажал кнопку Edit this file
-------------------------------------------------
-------------------------------------------------
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе - после ввода информации нажал на кнопку Сommit changes, в файле появился введенный текст.
-------------------------------------------------
-------------------------------------------------
 20. Синхронизировать внешний и локальный репозиторий JSON - git pull
-------------------------------------------------
$ ls
README.md  bug_report.json  new.json  preferencec.json  skills.json
-------------------------------------------------

